#!/usr/bin/env bash
# Tested with jq 1.6 & fzf 0.42.0
# Inspired by https://github.com/reegnz/jq-zsh-plugin
# Call with `jazz <big_file_with_many_paths>.json` or `<command producing a valid json> | jazz`
# End command with `... | pbcopy` or `... > output.json` to save selection

if [ -p /dev/stdin ]; then
  # Store stdin as tmp file, simplify calls to jq
  tmp_input=$(mktemp /tmp/jazz_stdin_XXX)
  chmod 700 "$tmp_input"
  cat /dev/stdin > "$tmp_input"
  input=$tmp_input
else
  input=$1
fi

err(){
  echo >&2 -n "$1"
}
erase_err(){
  echo >&2 -ne "\r\033[K"
}

trap 'test -f "$tmp_input" && rm -f "$tmp_input"' EXIT
err "Generating iterable paths..."
iterables=`jq -c "paths(iterables)" "$input"`
erase_err
err "Generating scalar paths..."
scalars=`jq -c "paths(scalars)" "$input"`
erase_err

# Inspired by this snippet from @dakusui for jq-front https://github.com/jqlang/jq/issues/1949#issuecomment-569278958
PATH_CONVERTER='if length == 0 then "."
else
        reduce .[] as $segment (
          "";
          . + ($segment |if type == "string" then "." + . else "[\(.)]" end)
        )
end'
PATH_CMD="printf {} | jq -cr '$PATH_CONVERTER'"

PREVIEW_CMD="cat {+f}" # print content of selected line to escape quotes
PREVIEW_CMD="$PREVIEW_CMD | awk '{print \"getpath(\"\$1\")\"}'" # interpolate quoted path in `getpath()`
PREVIEW_CMD="$PREVIEW_CMD | xargs -0 -I PATH jq --color-output PATH $input" # -0 to escape quotes

(echo [] ; echo "$iterables" ; echo "$scalars") | fzf \
                --height='50%' \
                --preview-window='right:50%' \
                --preview "$PATH_CMD ; $PREVIEW_CMD" \
                --tiebreak=length \
                --preview-label="Enter to output node, Ctrl-l to output path, Ctrl-c to exit" \
                --bind "enter:become($PREVIEW_CMD)" \
                --bind "ctrl-l:become($PATH_CMD)"

test -f "$tmp_input" && rm -f "$tmp_input"
