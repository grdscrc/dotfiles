set hidden " Edited buffers can exist hidden
set list " Display non-print characters
set showbreak=↪\ 
set listchars=tab:→\·,eol:↲,nbsp:␣,trail:•,extends:⟩,precedes:⟨
set tabstop=2
set shiftwidth=2
set expandtab
set nofixeol
set number relativenumber
set diffopt=filler,iwhite
set hlsearch

set foldmethod=syntax
set foldlevel=10
set foldclose=all
set foldcolumn=4

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
set cursorline
set modeline
set modelines=5
set scrolloff=25

" highlight CursorLine term=reverse ctermbg=darkgrey
" autocmd InsertEnter * highlight CursorLine ctermbg=black
" autocmd InsertLeave * highlight CursorLine term=reverse ctermbg=darkgrey
highlight SpecialKey ctermfg=8 guifg=grey
highlight NonText ctermfg=8 guifg=grey
highlight Folded ctermbg=0 ctermfg=4
highlight FoldColumn ctermfg=DarkGrey ctermbg=Black

call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
" Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-default branch
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Plugin outside ~/.vim/plugged with post-update hook
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Unmanaged plugin (manually installed and updated)
" Plug '~/my-prototype-plugin'

" https://github.com/airblade/vim-gitgutter

Plug 'https://github.com/tpope/vim-fugitive.git'
Plug 'https://github.com/tpope/vim-surround.git'
Plug 'https://github.com/airblade/vim-gitgutter.git'
nmap <space>hv <Plug>(GitGutterPreviewHunk)
nmap <space>hs <Plug>(GitGutterStageHunk)
nmap <space>hu <Plug>(GitGutterUndoHunk)
nmap <space>hn <Plug>(GitGutterNextHunk)
nmap <space>hp <Plug>(GitGutterPrevHunk)
nmap <space>hx :bdelete gitgutter<CR>

Plug 'https://github.com/vim-airline/vim-airline.git'
let g:airline#extensions#tabline#enabled = 1
Plug 'https://github.com/frazrepo/vim-rainbow.git'
Plug 'chrisbra/Colorizer'

Plug 'yuezk/vim-js'
Plug 'maxmellon/vim-jsx-pretty'

Plug 'preservim/nerdtree'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'metakirby5/codi.vim'

Plug 'joeytwiddle/sexy_scroller.vim'
let g:SexyScroller_MaxTime = 250
let g:SexyScroller_ScrollTime = 150
let g:SexyScroller_CursorTime = 50
let g:SexyScroller_EasingStyle = 3

" Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()
" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting

inoremap jj <esc>
nnoremap <space> :
" Close buffer without closing window
nnoremap <space>x :sp<bar>bn<bar>bd#<CR>
nnoremap <space>X :sp<bar>bp<bar>bd#<CR>
nnoremap <space>p :bp<CR>
nnoremap <space>n :bn<CR>
nnoremap <space>P :5bp<CR>
nnoremap <space>N :5bn<CR>
nnoremap <tab>n <C-w>w
nnoremap <tab>p <C-w>W
 
nnoremap <space>g :Git<bar>wincmd H<bar>vertical resize 80<CR>
nnoremap <space><C-G> :Gedit :<CR>

set splitbelow
set splitright

highlight clear SignColumn

nnoremap SS :split<CR>
nnoremap SV :vsplit<CR>

" fzf.vim
nnoremap FF :Files<CR>
nnoremap FG :GFiles?<CR>
nnoremap FB :Buffers<CR>
nnoremap FR :History:<CR>
nnoremap FA :Ag<CR>
" fuzzy find in lines containing word
nnoremap K :Ag <C-R><C-W><CR>
vnoremap K y:Ag <C-R>"<CR>

" windows
nnoremap <C-w>, 20<C-w><
nnoremap <C-w>. 20<C-w>>

" Close current buffer, window on next buffer
nnoremap ZB :bnext<bar>split<bar>bprevious<bar>bdelete<CR>
" Close current buffer, empty window
nnoremap ZW :enew<bar>bdelete#<CR>
" Close all
nnoremap ZX :qa<CR>
