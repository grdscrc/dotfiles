colorscheme koehler

set hidden " Edited buffers can exist hidden
set list " Display non-print characters
set showbreak=↪\  " Prefix for wrapped lines
set listchars=tab:→\·,eol:↲,nbsp:␣,space:-,trail:•,extends:⟩,precedes:⟨
set tabstop=2
set shiftwidth=2
set expandtab
set nofixeol
set number relativenumber
set diffopt=filler,iwhite
set hlsearch
set foldmethod=syntax
set foldlevel=10
set foldclose=all
set foldcolumn=4

let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif
set cursorline
set modeline
set modelines=5
set scrolloff=25

highlight WhiteSpace guifg=DarkGray
highlight SpecialKey ctermfg=8 guifg=grey
highlight NonText ctermfg=darkgray
highlight Folded ctermbg=0 ctermfg=8
highlight FoldColumn ctermfg=DarkGray ctermbg=Black
highlight VertSplit ctermfg=Black ctermbg=DarkGray
highlight MatchParen ctermbg=DarkGray
highlight Search ctermfg=white ctermbg=DarkGray

highlight LineNr ctermfg=5
highlight LineNrAbove ctermfg=DarkGray ctermbg=Black
highlight LineNrBelow ctermfg=DarkGray ctermbg=Black
highlight SignColumn ctermfg=DarkGray ctermbg=Black
highlight GitGutterAdd    ctermfg=2 ctermbg=0
highlight GitGutterChange ctermfg=3 ctermbg=0
highlight GitGutterDelete ctermfg=1 ctermbg=0

call plug#begin()
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'

" Make sure you use single quotes

" Shorthand notation; fetches https://github.com/junegunn/vim-easy-align
Plug 'junegunn/vim-easy-align'

" Any valid git URL is allowed
Plug 'https://github.com/junegunn/vim-github-dashboard.git'

" Multiple Plug commands can be written in a single line using | separators
Plug 'SirVer/ultisnips' | Plug 'honza/vim-snippets'

" On-demand loading
" Plug 'preservim/nerdtree', { 'on': 'NERDTreeToggle' }
" Plug 'tpope/vim-fireplace', { 'for': 'clojure' }

" Using a non-default branch
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable' }

" Plugin outside ~/.vim/plugged with post-update hook
" Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Unmanaged plugin (manually installed and updated)
" Plug '~/my-prototype-plugin'

" https://github.com/airblade/vim-gitgutter

Plug 'https://github.com/tpope/vim-fugitive.git'
" keep fugitive when hidden
autocmd User FugitiveObject setlocal bufhidden=

Plug 'https://github.com/tpope/vim-surround.git'
Plug 'https://github.com/airblade/vim-gitgutter.git'
nmap <c-g>g :GitGutter<CR>
nmap <c-g>v <Plug>(GitGutterPreviewHunk)
nmap <c-g>V :bdelete gitgutter<CR>
nmap <c-g>s <Plug>(GitGutterStageHunk)
nmap <c-g>x <Plug>(GitGutterUndoHunk)
nmap <c-g>n <Plug>(GitGutterNextHunk)
nmap <c-g>p <Plug>(GitGutterPrevHunk)

Plug 'https://github.com/vim-airline/vim-airline.git'
let g:airline#extensions#tabline#enabled = 1
let g:airline_section_c = '' " no filename, already in tabline
let g:airline_section_z = '' " reorder ending
let g:airline_section_z = g:airline_section_z.'%{g:airline_symbols.colnr}%v'
let g:airline_section_z = g:airline_section_z.'%{g:airline_symbols.linenr}%l'
let g:airline_section_z = g:airline_section_z.'/%L%{g:airline_symbols.maxlinenr} '
let g:airline_section_z = g:airline_section_z.'%p%%'

Plug 'https://github.com/frazrepo/vim-rainbow.git'
Plug 'chrisbra/Colorizer'

Plug 'yuezk/vim-js'
Plug 'maxmellon/vim-jsx-pretty'

Plug 'metakirby5/codi.vim'

Plug 'joeytwiddle/sexy_scroller.vim'
let g:SexyScroller_MaxTime = 250
let g:SexyScroller_ScrollTime = 150
let g:SexyScroller_CursorTime = 50
let g:SexyScroller_EasingStyle = 3

Plug 'wfxr/minimap.vim', {'do': ':!cargo install --locked code-minimap'}
let g:minimap_width = 80

Plug 'dominikduda/vim_current_word'
let g:vim_current_word#highlight_current_word = 0

Plug 'voldikss/vim-floaterm'
nmap <space>tt :FloatermNew<CR>
nmap <space>tn :FloatermNew node<CR>

Plug 'tpope/vim-rsi'

" Initialize plugin system
" - Automatically executes `filetype plugin indent on` and `syntax enable`.
call plug#end()
" You can revert the settings after the call like so:
"   filetype indent off   " Disable file-type-specific indentation
"   syntax off            " Disable syntax highlighting

inoremap jk <esc>
inoremap jj <esc>
nnoremap <space> :
" Close buffer without closing window
nnoremap <space>x :sp<bar>bn<bar>bd#<CR>
nnoremap <space>X :sp<bar>bp<bar>bd#<CR>
nnoremap <space>p :bp<CR>
nnoremap <space>n :bn<CR>
nnoremap <space>P :5bp<CR>
nnoremap <space>N :5bn<CR>
nnoremap <tab>n <C-w>w
nnoremap <tab>p <C-w>W

inoremap <C-h> <Left>
inoremap <C-l> <Right>
inoremap <C-j> <Down>
inoremap <C-k> <Up>

inoremap () ()<Left>
inoremap [] []<Left>
inoremap {} {}<Left>
inoremap '' ''<Left>
inoremap "" ""<Left>

nmap <c-n> *
nmap <c-p> #

nnoremap g/ /\<\><Left><Left>

" goto tag and set as search
nnoremap gt *N<C-]>n

" nnoremap <space>G :Git<bar>wincmd H<bar>vertical resize 80<CR>
nnoremap <space><C-G> :Gedit :<CR>

set splitbelow
set splitright

nnoremap SS :split<CR>
nnoremap SV :vsplit<CR>

" fzf.vim
nnoremap f<C-F> :Files<CR>
nnoremap f<C-G> :GFiles?<CR>
nnoremap f<C-B> :Buffers<CR>
nnoremap f<C-R> :History:<CR>
nnoremap f<C-A> :Ag<CR>
nnoremap f<C-L> :BLines<CR>
nnoremap f<C-T> :Tags<CR>

" windows
nnoremap <C-w>, 20<C-w><
nnoremap <C-w>. 20<C-w>>

" Remove current buffer
nnoremap ZZ :bdelete<CR>
" Close window
nnoremap ZX :hide<CR>
" Replace current buffer with fzf
nnoremap ZF :bdelete<bar>FZF<CR>
" Remove all buffers
nnoremap ZA :%bdelete<CR>

" :Index shows index.txt (with all key-combinations) using fzf-vim
command! Index silent execute ":help index.txt" | silent execute ":BLines!"
nnoremap FI :Index<CR>
