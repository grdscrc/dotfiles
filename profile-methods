function mkcd {
  mkdir "$@" && cd "$@";
}

function swop {
  if [ $# -ne 2 ] && [ $# -ne 3 ]; then
    >&2 echo "Usage : swop <regex to replace> <replacement> [directory or files to process]" && return 0
  fi

  ack -l "$1" "$3" | xargs perl -pi -E "s/$1/$2/g";
}

function hush {
  $@ 2> /dev/null
}

function errcho {
  (>&2 echo $@)
}

function git_cherry_nibble {
  if [ $# -ne 1 ]; then # Other than 1 parameter
    >&2 echo "Usage : git_cherry_nibble <commit hash>"
    return 0
  fi

  git cherry-pick $1 && git reset --soft HEAD
}

function git_pop_branch {
  branchtopop=$(git current-branch)
  git checkout master
  git branch --delete $branchtopop
}

function deploy_sisra_proxy {
  echo $@
  DIR=`pwd`
  cd /Users/igor/work/syadem/sisra-ws-security-proxy
  gradle build
  ./deploy.sh $@
  cd $DIR
}

function log_sisra_proxy {
  if [[ $1 == "local" ]]; then
    tail -f /Users/igor/work/syadem/sisra-ws-security-proxy/log/development.log
  else
    hm ssh $1 prv "tail -f /opt/sisra_ws_security_proxy/sisra_ws_security_proxy.log"
  fi
}

function nokogiripleasewithversion {
  version="$1"
  libxml2_prefix=$(brew --prefix libxml2)
  gem install nokogiri -v "$version" -- \
    --use-system-libraries \
    --with-xml2-include="$libxml2_prefix"/include/libxml2
}

function colp {
  column_ref=$1
  awk "{print \$$column_ref}"
}

function line {
  lineno="$1"
  awk "FNR==$lineno"
}

function lines {
  start="$1"
  endd="$2"
  awk "FNR>=$start && FNR<=$endd"
}

function gchain {
  for command in "$@"; do
    echo $command | xargs git
  done
}

function rjq {
  if [[ $# < 1 ]]; then
    >&2 echo 'rjson $remote:$path $json_selector'
    return 0
  fi
  rclone lsjson $1 | jq $2
}

function agv {
  ag -l $@ | xargs -o vim +/\\c"$1"
}

function change_case {
  snake_head_regex='s/^([A-Z])/\L\1/g'
  snake_inner_regex='s/([a-z0-9])([A-Z])/\1_\L\2/g'

  camel_head_regex='s/^([a-z])/\L\1/g'
  camel_inner_regex='s/([a-z0-9]_?)([A-Z])/\1\U\2/g'

  kebab_head_regex='s/^([A-Z])/\L\1/g'

  if [[ $1 == "--snake" ]]; then
    head_regex=$snake_head_regex
    inner_regex=$snake_inner_regex
  elif [[ $1 == "--camel" ]]; then
    head_regex=$camel_head_regex
    inner_regex=$camel_inner_regex
  elif [[ $1 == "--kebab" ]]; then
    head_regex=$kebab_head_regex
    inner_regex=$camel_inner_regex
  else
    errcho "Invalid option $1"
    errcho "Available options : --snake, --camel, --kebab"
    return 0
  fi

  echo $2 | \
    gsed -E $inner_regex | \
    gsed -E $head_regex
}

function docker_bash {
  container_name="$1" # Accepts substring of name

  docker_container_id=$(docker ps -aqf "name=$container_name")

  if [[ `echo "$docker_container_id" | wc -l` -gt 1 ]] ; then
    >&2 echo Ambiguous container name
    >&2 docker ps -af "name=$container_name"
    return 0
  fi

  docker exec -it "$docker_container_id" bash -i
}

function between {
  mark1=$1
  mark2=$2
  awk "/$mark1/{flag=1;next}/$mark2/{flag=0}flag"
}

function brew_tally {
  brew outdated | \
    grep -v "$(brew list --pinned)" | \
    tee ~/.brew_outdated_packages | \
    wc -l| \
    xargs echo 'Brew outdated packages:'
}

function brew_upgrade {
  brew upgrade < ~/.brew_outdated_packages
}

function p12ToCerAndKey {
  p12=$1
  cer=${p12%.p12}.cer
  key=${p12%.p12}.key

  openssl pkcs12 -in $p12 -out $cer -clcerts -nokeys
  openssl pkcs12 -in $p12 -out $key -nocerts -nodes
}

function ranzer {
  dir_part=$1

  most_frecent_entry=$(z -l $dir_part|awk 'END{print $NF}')

  ranger $most_frecent_entry
}

function af {
  regex="$@"

  ag -l "$regex" && fd "$regex"
}

function tmig {
  rake db:migrate:status|tail -$1
}

function testaing {
  method=$1
  shift

  endpoint='http://localhost:3008/testaing'
  header="Content-Type: application/json"
  case $method in
    start)
      payload='{"action":"create", "type":"resources"}'

      set -x && curl $endpoint -X POST -d $payload -H "$header"
      ;;
    random)
      set -x && curl $endpoint -X POST -d '{"random": "true"}' -H "$header"
      ;;
    stop)
      set -x && curl $endpoint/stop -H "$header"
      ;;
    ping)
      set -x && curl $endpoint/ping -H "$header"
      ;;
    reset)
      set -x && curl $endpoint/reset -H "$header"
      ;;
    cleanup)
      set -x && curl $endpoint/clean-up -H "$header"
      ;;
    *)
      >&2 echo "Usage : testaing [[start] [object] [amount]|'random'|'stop'|'ping'|'reset'|'cleanup']" && return 0
      ;;
  esac
}
