# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

EDITOR=vim

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

if [[ ! "$PROMPT_COMMAND" =~ "history" ]]; then
	export PROMPT_COMMAND="history -a;"
fi

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
mkdir -p ~/.bash_histories
# export HISTFILE="$HOME/.bash_histories/$(basename $(tty))_$(date '+%Y-%m-%d')"
export HISTFILE="$HOME/.bash_histories/$(date '+%Y-%m')"
export HISTSIZE=1000
export HISTFILESIZE=2000
export HISTTIMEFORMAT="%d/%m/%y %T "

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

PAGER=bat

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alFh'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# alias pbcopy='xclip -selection clipboard'
# alias pbpaste='xclip -selection clipboard -o'
alias fd='fdfind'
alias docc=docker-compose
alias dctail='docker-compose logs --follow'
alias dps="docker ps --format=\"table {{.Names}}\t{{.Status}}\t{{.Image}}\""
alias dcps="docker-compose ps --format=\"table {{.Name}}\t{{.Status}}\t{{.Image}}\""
alias v="vim"

epoch () {
	date +"%s"
}
nanoseconds () {
	PRECIS=$1
	date +"%${PRECIS}N"
}
alias microseconds="nanoseconds 6"
alias milliseconds="nanoseconds 3"

alias fzf_mini="fzf --height=20% --info=inline"
gco() {
	git branch |
		grep -v "^\*" |
		fzf_mini --query=$1 --reverse |
		xargs git checkout
}

alias ez="eza --all --long --git --git-repos --sort=time"
alias et="ez --tree"

warn_azerty() {
	KILL_LEFT=\\033\[1K
	KILL_RIGHT=\\033\[0K
	CARRIAGE_RETURN=\\r
	# ANSI Escape Sequences: https://gist.github.com/fnky/458719343aabd01cfb17a3a4f7296797#erase-functions
	echo -n heads up handsome
	sleep 1
	echo -ne ${CARRIAGE_RETURN}check your keyboard cause it might be in azerty
	sleep 2
	echo -ne ${CARRIAGE_RETURN}byeee$KILL_RIGHT
	sleep .2
	echo -ne $KILL_LEFT$CARRIAGE_RETURN
}

alias .b=". ~/.bashrc"
alias v.b="vim ~/.bashrc"
alias v.v="vim ~/.vimrc"
alias ew="warn_azerty; ez"
alias bat=batcat
alias baj="bat --language json"
alias jpaths="jq 'paths(scalars) | join(\".\")'"
alias jfz="jq -r 'paths(scalars) as \$p | [(\$p | join(\".\")), getpath(\$p)] | join(\" : \")' |fzf"
alias pz="pbpaste | jfz"
alias curly="curl -s -o /dev/null -w '%{http_code}\n'"
alias jz=jqfz
alias fugitive='vim +:Git +:only'
alias fug=fugitive
alias npz="jq -r '.scripts|keys[]' package.json | fzf_mini --preview='jq \'.scripts.\\\"{}\\\"' package.json\""
alias ub=unbuffer

# trash() { mkdir ~/.trash 2> /dev/null ; mv "$@" ~/.trash/ ; }

gordon() {
	unbuffer $@ | bat
}

/usr/bin/keychain --nogui ~/.ssh/id_ed25519
source $HOME/.keychain/NR00S17DSI19XRX-sh

PATH=$PATH":/mnt/c/Program Files/Microsoft VS Code/bin"

parse_git_branch() {
	git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}
# export PS1="\u@\h \[\033[34m\]\w\[\033[33m\]\$(parse_git_branch)\[\033[00m\] $ "
git_short_status() {
	git status -s 2>/dev/null |awk '{print $1}'|sort -ur|tr "\n" '_'
}

git_in_prompt() {
	if git rev-parse --is-inside-work-tree > /dev/null 2>&1; then
		BRANCH=$(parse_git_branch)
		if echo $BRANCH | grep -qe "FEATURES/M-[0-9]\+"; then
			BRANCH=`[[ $BRANCH =~ [0-9]+ ]] && echo ${BASH_REMATCH[0]} || echo $BRANCH`
		fi
		echo "($BRANCH)" # $(git_short_status))"
	fi
}

# SET PS1
GREEN="38;5;46;3m"
BLUE="38;5;33;1m"
RED="38;5;204m"
export PS1="\[\e[$GREEN\]\u\[\e[0m\]@"
#PS1=$PS1"\[\e[$BLUE\]\h "
PS1=$PS1"\[\e[$BLUE\]"
PS1=$PS1"\[\e[22m\]\w \[\e[0m\]"
PS1=$PS1"\[\e[$RED\]\$(git_in_prompt)\[\e[0m\]\n$ "

# Enable keybindings for fzf
# source /usr/share/doc/fzf/examples/key-bindings.bash
[ -f ~/.fzf.bash ] && source ~/.fzf.bash
export FZF_DEFAULT_COMMAND='/usr/bin/fdfind --hidden 2> /dev/null || find .'

source /usr/share/bash-completion/completions/git

eval "$(fasd --init auto)"

export PATH="/home/unix/git-fuzzy/bin:$PATH"
[ "${PATH#*/usr/local/go/bin:}" == "$PATH" ] && export PATH="/usr/local/go/bin:$PATH"
export PATH="/home/unix/.cargo/bin:$PATH"

lines () {
    tr "${1:-:}" '\n'
}

# echo inputrc start
# set editing-mode vi
# GRAY='\033[1;30m'
# NC='\033[0m' # No Color
# set show-mode-in-prompt off
# set vi-ins-mode-string "\1${GRAY}_ins_${NC}\2"
# set vi-cmd-mode-string "\1${GRAY}:cmd:${NC}\2"
# echo inputrc end
# bind 'set show-mode-in-prompt on'
# bind '"jk":vi-movement-mode'

spin_boy () {
	NO_CU=\\033\[?25l
	YE_CU=\\033\[?25h
	CARRIAGE_RETURN=\\r
	expr -- "$1" + 0 > /dev/null 2>&1 || return # check if arg is number
	END=$((SECONDS + $1))
	# echo END $END
	echo -ne $NO_CU
	while [ $SECONDS -lt $END ]; do
		echo -ne "$CARRIAGE_RETURN/"
		sleep .1
		echo -ne "$CARRIAGE_RETURN-"
		sleep .1
		echo -ne "$CARRIAGE_RETURN\\"
		sleep .1
		echo -ne "$CARRIAGE_RETURN|"
		sleep .1
		echo -ne "$CARRIAGE_RETURN-"
		sleep .1
	done
	echo -ne "$CARRIAGE_RETURN$YE_CU"
}

curl_text() {
	url=$1
	selector=${2:-body}
	curl -s "$1" | \
		htmlq "$2"| \
		sed -e 's/<[^>]*>//g' #| \ awk '{$1=$1;print}'
}

rename_terminal() {
	dir=`pwd | cut -d "/" -f $(($(grep -o "/" <<< $(pwd) | wc -l) + 1))`
	name=${1:-$dir}
	echo -ne "\033]0;"$name"\007"
}
alias rt=rename_terminal

source ~/.secrets
alias dctail="docc logs --follow"
c() {
	if [[ $1 == "" ]]; then
		dir=.
	else
		dir=`fasd -R $1|head -1`
	fi
	echo code $dir \&
}

alias wdocker="/mnt/c/Program\ Files/Docker/Docker/Docker\ Desktop.exe"
zrt() {
	z $1 && rt $1
}
alias err='echo >&2'

loop(){
	count=0
	while true; do
		eval $*
    ((count++))

		echo -n 3.0
		for i in {2..0}; do
			for j in {9..0}; do
				sleep 0.1
				err -ne "\r$i.$j"s
			done
		done
		err "Run #$count..."
	done
}
alias lp=loop

npm_scripts(){
 run=`npm run`
 scripts=`echo "$run" | egrep "^  " | sed 's/^[[:space:]][[:space:]]//' # | awk '{ORS=NR%2?" # ":"\n"; print}'`
 echo "$scripts"
}

# export SSH_AUTH_SOCK=$(/mnt/c/Windows/System32/wsl.exe -u $USER echo \$SSH_AUTH_SOCK)
alias tm=tmux
alias tmr=tmuxinator

alias unbold='sed -e "s/1;/0;/g"'
tight() {
	width=${1:-80}
	sed -E "s/^(.{$width}).*$/\1/"
}

alias codium=/mnt/c/Users/igor.descayrac/AppData/Local/Programs/VSCodium/bin/codium
alias t=tmux
alias jump="sshpass -f ~/passwords/.nrco_jump_dev ssh igor.descayrac@appmanager@nrcoadl-meth01.awseuw1.em-nrco.int@jump"
jump_exp () { jump "cd mnt/express && $*"; }

prompt () {
	read -n 1 -r -p "$* : "
	echo
	[ "${REPLY,,}" == "y" ]
}

vimcode() {
	vim -c 'Git | wincmd H | vertical resize 50 | wincmd l | FZF'
}

. "$HOME/.cargo/env"

source /home/unix/.config/broot/launcher/bash/br
